version: '3.8'

services:
  # Service MongoDB
  mongo:
    image: mongo:7.0
    container_name: competence-tracker-mongo
    restart: unless-stopped
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password123
      MONGO_INITDB_DATABASE: competence-tracker
    volumes:
      - mongo_data:/data/db
      - ./mongo-init:/docker-entrypoint-initdb.d:ro
    networks:
      - competence-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Service Backend API
  backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    container_name: competence-tracker-backend
    restart: unless-stopped
    ports:
      - "5000:5000"
    environment:
      - NODE_ENV=production
      - PORT=5000
      - MONGO_URI=mongodb://mongo:27017/competence-tracker
      - FRONTEND_URL=http://localhost:5173
    depends_on:
      mongo:
        condition: service_healthy
    networks:
      - competence-network
    volumes:
      - ./backend:/app
      - /app/node_modules
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:5000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Service Frontend (pour développement)
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    container_name: competence-tracker-frontend
    restart: unless-stopped
    ports:
      - "5173:5173"
    environment:
      - VITE_API_URL=http://localhost:5000/api
    depends_on:
      - backend
    networks:
      - competence-network
    volumes:
      - .:/app
      - /app/node_modules

# Volumes pour persister les données
volumes:
  mongo_data:
    driver: local

# Réseau pour la communication entre services
networks:
  competence-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16